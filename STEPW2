2.
木構造を使えばO(log N)、ハッシュテーブルを使えばO(1)で検索・追加・削除を実現することができて、これだけ見ればハッシュテーブルのほうがはるかに優れているように見える。ところが、現実の大規模なデータベースでは、（もちろんいろいろなものがあるが）ハッシュテーブルではなく木構造が使われることが多い。その理由を考えよ。

いくつか重要な理由があるので、思いつくだけ考えてください
次回の講義の最初で議論します(๑´ڡ`๑)

答え：
The complexity of searching / adding / removing an element is O(1) with a hash table, whereas the complexity is O(log N) with a tree. This means that a hash table is more efficient than a tree. However, large-scale database systems used in a real world tend to prefer a tree to a hash table. Consider reasons why a tree is more preferred than a hash table for those database systems.

(1) tree takes up less memory space than hash table as they only reserve as much memory as needed
(2) when the set of data keeps growing, hash table needs to be resized and its elements reallocated frequently, which may be costly operation
(3) hash table's time complexity is largely dependent on the hash function chosen, while tree's behavior is relatively constant and more predictable, so it may be "safer" to use tree
(4) hash table may be more easily hacked (once the hash function is made known)
(5) a tree can keep elements in sorted order, so it may be more useful when sorted data over a range is needed

3.
このようなキャッシュの管理をほぼO(1)で実現できるデータ構造を考えよ
ヒント:
簡単な問題ではないですが、答えを導くのに特別な知識はいりません
キャッシュの動きを整理して、よーーーく考えてみてください！
答えに辿り着くかどうかより「きちんと考えること」が大事なので、「途中まで考えたけどわかんなかった☆（ゝω・）vｷｬﾋﾟ」「O(X)で動くものならできた☆（ゝω・）vｷｬﾋﾟ」などの答えで提出してくれてOKです

答え：
Store the list of <URL, Web page> as a queue into a hash table, such that 
(1) search takes O(1) time
(2) insert takes O(1) time
(3) pop the front element(i.e.least recently accessed pair) takes O(1) time
E.g. 
Take each URL as a Key and each webpage as a corresponding Value -> Store the keys as a queue, such that when a new URL is added to the queue, the front URL is poped
(このような構造は正しいかどうか/できるかどうかはわからないですけど…)

/*ありがとうございます！*/